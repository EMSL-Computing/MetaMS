window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "metaMS", "modulename": "metaMS", "kind": "module", "doc": "<h1 id=\"table-of-contents\">Table of Contents</h1>\n\n<ul>\n<li><a href=\"#metams\">MetaMS</a>  </li>\n<li><a href=\"#current-version\">Version</a>  </li>\n<li><a href=\"#available-workflows\">Available Workflows</a></li>\n<li><a href=\"#disclaimer\">Disclaimer</a></li>\n</ul>\n\n<h1 id=\"metams\">MetaMS</h1>\n\n<p><strong>MetaMS</strong> is a repository of workflows for metabolomics data processing and annotation in association with the NMDC (<a href=\"https://microbiomedata.org/\">National Microbiome Data Collaborative</a>)</p>\n\n<h2 id=\"current-version\">Current Version</h2>\n\n<h3 id=\"321\"><code>3.2.1</code></h3>\n\n<h2 id=\"available-workflows\">Available Workflows</h2>\n\n<ul>\n<li><a href=\"docs/gcms_metabolomics/README_GCMS.md\">GC/MS metabolomics workflow</a></li>\n<li><a href=\"docs/lcms_lipidomics/README_LCMS_LIPID.md\">LC/MS lipidomics workflow</a></li>\n<li><a href=\"docs/lcms_metabolomics/README_LCMS_METABOLOMICS.md\">LC/MS metabolomics workflow</a></li>\n</ul>\n\n<p>For information about data input, output, and execution for the individual workflows, follow the linked readmes above.</p>\n\n<h2 id=\"disclaimer\">Disclaimer</h2>\n\n<p>This material was prepared as an account of work sponsored by an agency of the\nUnited States Government.  Neither the United States Government nor the United\nStates Department of Energy, nor Battelle, nor any of their employees, nor any\njurisdiction or organization that has cooperated in the development of these\nmaterials, makes any warranty, express or implied, or assumes any legal\nliability or responsibility for the accuracy, completeness, or usefulness or\nany information, apparatus, product, software, or process disclosed, or\nrepresents that its use would not infringe privately owned rights.</p>\n\n<p>Reference herein to any specific commercial product, process, or service by\ntrade name, trademark, manufacturer, or otherwise does not necessarily\nconstitute or imply its endorsement, recommendation, or favoring by the United\nStates Government or any agency thereof, or Battelle Memorial Institute. The\nviews and opinions of authors expressed herein do not necessarily state or\nreflect those of the United States Government or any agency thereof.</p>\n\n<pre><code>             PACIFIC NORTHWEST NATIONAL LABORATORY\n                          operated by\n                            BATTELLE\n                            for the\n               UNITED STATES DEPARTMENT OF ENERGY\n                under Contract DE-AC05-76RL01830\n</code></pre>\n"}, {"fullname": "metaMS.readme_path", "modulename": "metaMS", "qualname": "readme_path", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;/Users/heal742/LOCAL/05_NMDC/02_MetaMS/metams/metaMS/../README.md&#x27;"}, {"fullname": "metaMS.cli", "modulename": "metaMS.cli", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "metaMS.cli.run_gcms_wdl_workflow", "modulename": "metaMS.cli", "qualname": "run_gcms_wdl_workflow", "kind": "variable", "doc": "<p>Run the GCMS workflow</p>\n\n<p>gcms_workflow_paramaters_toml_file = toml file with workflow parameters</p>\n\n<p>output_types = csv, excel, pandas, json set on the parameter file</p>\n\n<p>corems_toml_path = toml file with corems parameters</p>\n\n<p>--jobs = number of processes to run in parallel</p>\n", "default_value": "&lt;Command run-gcms-wdl-workflow&gt;"}, {"fullname": "metaMS.cli.run_gcms_workflow", "modulename": "metaMS.cli", "qualname": "run_gcms_workflow", "kind": "variable", "doc": "<p>Run the GCMS workflow</p>\n\n<p>gcms_workflow_paramaters_toml_file = toml file with workflow parameters</p>\n\n<p>output_types = csv, excel, pandas, toml set on the parameter file</p>\n\n<p>corems_toml_path = toml file with corems parameters</p>\n\n<p>--jobs = number of processes to run in parallel</p>\n", "default_value": "&lt;Command run-gcms-workflow&gt;"}, {"fullname": "metaMS.cli.dump_gcms_toml_template", "modulename": "metaMS.cli", "qualname": "dump_gcms_toml_template", "kind": "variable", "doc": "<p>Dumps a toml file template\nto be used as the workflow parameters input for the GCMS workflow</p>\n", "default_value": "&lt;Command dump-gcms-toml-template&gt;"}, {"fullname": "metaMS.cli.dump_gcms_corems_toml_template", "modulename": "metaMS.cli", "qualname": "dump_gcms_corems_toml_template", "kind": "variable", "doc": "<p>Dumps a CoreMS toml file template\nto be used as the workflow parameters input</p>\n", "default_value": "&lt;Command dump-gcms-corems-toml-template&gt;"}, {"fullname": "metaMS.cli.dump_lipidomics_toml_template", "modulename": "metaMS.cli", "qualname": "dump_lipidomics_toml_template", "kind": "variable", "doc": "<p>Writes a toml file template to run the lipidomics workflow, starting with the input file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>toml_file_name</strong> (str):\nThe name of the toml file to write the parameters to</li>\n</ul>\n", "default_value": "&lt;Command dump-lcms-metabolomics-toml-template&gt;"}, {"fullname": "metaMS.cli.run_lipidomics_workflow", "modulename": "metaMS.cli", "qualname": "run_lipidomics_workflow", "kind": "variable", "doc": "<p>Run the lipidomics workflow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>paramaters_file</strong> (str):\nThe path to the toml file with the lipidomics workflow parameters</li>\n<li><strong>file_paths</strong> (str):\nThe paths to the input files, separated by commas as one string</li>\n<li><strong>output_directory</strong> (str):\nThe directory where the output files will be stored</li>\n<li><strong>corems_params</strong> (str):\nThe path corems parameters toml file</li>\n<li><strong>db_location</strong> (str):\nThe path to the sqlite database for lipid spectra searching</li>\n<li><strong>scan_translator_path</strong> (str):\nThe path to the scan translator file</li>\n<li><strong>cores</strong> (int):\nThe number of cores to use for processing</li>\n</ul>\n", "default_value": "&lt;Command run-lipidomics-workflow&gt;"}, {"fullname": "metaMS.cli.run_lcmsmetab_workflow", "modulename": "metaMS.cli", "qualname": "run_lcmsmetab_workflow", "kind": "variable", "doc": "<p>Run the LC metabolomics workflow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>paramaters_file</strong> (str):\nThe path to the toml file with the workflow parameters</li>\n<li><strong>file_paths</strong> (str):\nThe paths to the input files, separated by commas as one string</li>\n<li><strong>output_directory</strong> (str):\nThe directory where the output files will be stored</li>\n<li><strong>corems_params</strong> (str):\nThe path corems parameters toml file</li>\n<li><strong>msp_file_path</strong> (str):\nThe path to the sqlite database for spectra searching</li>\n<li><strong>scan_translator_path</strong> (str):\nThe path to the scan translator file</li>\n<li><strong>cores</strong> (int):\nThe number of cores to use for processing</li>\n</ul>\n", "default_value": "&lt;Command run-lcms-metabolomics-workflow&gt;"}, {"fullname": "metaMS.gcmsWorkflow", "modulename": "metaMS.gcmsWorkflow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters", "kind": "class", "doc": "<p>Data class to establish workflow parameters.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_paths</strong> (tuple(str)):\nPaths to files to process.</li>\n<li><strong>calibration_reference_path</strong> (str):\nFAMEs retention index reference SQLite database.</li>\n<li><strong>calibration_file_path</strong> (str):\nFAMEs retention index calibration filepath.</li>\n<li><strong>nmdc_metadata_path</strong> (str):\nSample and processing metadata.</li>\n<li><strong>corems_toml_path</strong> (str):\nCoreMS configuration.</li>\n<li><strong>output_directory</strong> (str):\nPath to save outputs.</li>\n<li><strong>output_filename</strong> (str):\nOutput filename.</li>\n<li><strong>output_type :</strong>: Output extension.</li>\n</ul>\n"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.__init__", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_paths</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;data/...&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;data/...&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_reference_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/...&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/...&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">nmdc_metadata_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;configuration/nmdc_metadata.json&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">corems_toml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;configuration/corems.toml&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/...&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;data/...&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;csv&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">metabref_token_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;configuration/...&#39;</span></span>)</span>"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.file_paths", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.file_paths", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;data/...&#x27;, &#x27;data/...&#x27;)"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.calibration_reference_path", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.calibration_reference_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;data/...&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.calibration_file_path", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.calibration_file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;data/...&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.nmdc_metadata_path", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.nmdc_metadata_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;configuration/nmdc_metadata.json&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.corems_toml_path", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.corems_toml_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;configuration/corems.toml&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.output_directory", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.output_directory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;data/...&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.output_filename", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.output_filename", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;data/...&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.output_type", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.output_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;csv&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.WorkflowParameters.metabref_token_path", "modulename": "metaMS.gcmsWorkflow", "qualname": "WorkflowParameters.metabref_token_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;configuration/...&#x27;"}, {"fullname": "metaMS.gcmsWorkflow.worker", "modulename": "metaMS.gcmsWorkflow", "qualname": "worker", "kind": "function", "doc": "<p>Wraps <code>workflow_worker</code> using cProfile.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.run_gcms_metabolomics_workflow_wdl", "modulename": "metaMS.gcmsWorkflow", "qualname": "run_gcms_metabolomics_workflow_wdl", "kind": "function", "doc": "<p>GCMS metabolomics workflow with WDL.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_paths</strong> (tuple(str)):\nPaths to files to process.</li>\n<li><strong>calibration_file_path</strong> (str):\nFAMEs retention index calibration filepath.</li>\n<li><strong>output_directory</strong> (str):\nPath to save outputs.</li>\n<li><strong>output_filename</strong> (str):\nOutput filename.</li>\n<li><strong>output_type :</strong>: Output extension.</li>\n<li><strong>corems_toml_path</strong> (str):\nCoreMS configuration.</li>\n<li><strong>metabref_token_path</strong> (str):\nToken to authenticate MetabRef database access.</li>\n<li><strong>jobs</strong> (int):\nNumber of concurrent jobs.</li>\n<li><strong>[unused] db_path</strong> (str):\nPath to database.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_paths</span>,</span><span class=\"param\">\t<span class=\"n\">calibration_file_path</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span>,</span><span class=\"param\">\t<span class=\"n\">output_filename</span>,</span><span class=\"param\">\t<span class=\"n\">output_type</span>,</span><span class=\"param\">\t<span class=\"n\">corems_toml_path</span>,</span><span class=\"param\">\t<span class=\"n\">metabref_token_path</span>,</span><span class=\"param\">\t<span class=\"n\">jobs</span>,</span><span class=\"param\">\t<span class=\"n\">db_path</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.run_gcms_metabolomics_workflow", "modulename": "metaMS.gcmsWorkflow", "qualname": "run_gcms_metabolomics_workflow", "kind": "function", "doc": "<p>GC/MS metabolomics workflow.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>workflow_params_file</strong> (str):\nPath to workflow parameters file.</li>\n<li><strong>jobs</strong> (int):\nNumber of concurrent jobs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">workflow_params_file</span>, </span><span class=\"param\"><span class=\"n\">jobs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.read_toml", "modulename": "metaMS.gcmsWorkflow", "qualname": "read_toml", "kind": "function", "doc": "<p>Read TOML file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nPath to TOML file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Dictionary of parameter:value pairs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.load_workflow_parameters", "modulename": "metaMS.gcmsWorkflow", "qualname": "load_workflow_parameters", "kind": "function", "doc": "<p>Load workflow configuration parameters from file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nPath to parameters file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>WorkflowParameters</code></strong>: Data class containing workflow parameters.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.load_corems_parameters", "modulename": "metaMS.gcmsWorkflow", "qualname": "load_corems_parameters", "kind": "function", "doc": "<p>Load workflow configuration parameters from file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>path</strong> (str):\nPath to parameters file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>dict</strong>: Dictionary of parameter:value pairs.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.run_workflow_worker_and_write", "modulename": "metaMS.gcmsWorkflow", "qualname": "run_workflow_worker_and_write", "kind": "function", "doc": "<p>Function for running the workflow_worker and writing out the output.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (tuple):\nArguments fed to worker.\nargs = (file_path, rt_ri_pairs, corems_params_file, cal_file_path, output_type, output_directory)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but writes out the output to the specified directory.</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.workflow_worker", "modulename": "metaMS.gcmsWorkflow", "qualname": "workflow_worker", "kind": "function", "doc": "<p>Wrap data processing functionality for parallel execution. Loads GC data,\napplies calibration, performs spectral search.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>args</strong> (tuple):\nArguments fed to worker.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>gcms</strong>: GCMS object.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.gcmsWorkflow.get_gcms", "modulename": "metaMS.gcmsWorkflow", "qualname": "get_gcms", "kind": "function", "doc": "<p>Convenience function to load and process file according to CoreMS configuration\nparameters.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span>, </span><span class=\"param\"><span class=\"n\">corems_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_functions", "modulename": "metaMS.lcms_functions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "metaMS.lcms_functions.instantiate_lcms_obj", "modulename": "metaMS.lcms_functions", "qualname": "instantiate_lcms_obj", "kind": "function", "doc": "<p>Instantiate a corems LCMS object from a binary file.  Pull in ms1 spectra into dataframe (without storing as MassSpectrum objects to save memory)</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_in</strong> (str or Path):\nPath to binary file</li>\n<li><strong>spectra</strong> (str, optional):\nType of spectra to pull in, default is \"ms1\". Other options are \"ms2\" or \"none\".</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object with unprocessed ms1 spectra included as an attribute</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_in</span>, </span><span class=\"param\"><span class=\"n\">spectra</span><span class=\"o\">=</span><span class=\"s1\">&#39;ms1&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_functions.set_params_on_lcms_obj", "modulename": "metaMS.lcms_functions", "qualname": "set_params_on_lcms_obj", "kind": "function", "doc": "<p>Set parameters on the LCMS object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to set parameters on</li>\n<li><strong>params_toml</strong> (str or Path):\nPath to toml file with parameters</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, sets parameters on the LCMS object</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">params_toml</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_functions.load_scan_translator", "modulename": "metaMS.lcms_functions", "qualname": "load_scan_translator", "kind": "function", "doc": "<p>Translate scans using a scan translator</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scan_translator</strong> (str or Path):\nPath to scan translator yaml file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>scan_dict</strong> (dict, optional):\nDict with keys as parameter keys and values as lists of scans.\nDefault is None, which will use the default scan translator\nof \"{\"ms2\": {\"scan_filter\": \"\", \"resolution\": \"high\"}}\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">scan_translator</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_functions.check_scan_translator", "modulename": "metaMS.lcms_functions", "qualname": "check_scan_translator", "kind": "function", "doc": "<p>Check if scan translator is provided and that it maps correctly to scans and parameters</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n<li><strong>scan_translator</strong> (str or Path):\nPath to scan translator yaml file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, raises errors if scan translator does not map correctly to scans and parameters</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_functions.add_mass_features", "modulename": "metaMS.lcms_functions", "qualname": "add_mass_features", "kind": "function", "doc": "<p>Process ms1 spectra and perform molecular search</p>\n\n<p>This includes peak picking, adding and processing associated ms1 spectra,\nintegration of mass features, annotation of C13 mass features, deconvolution of ms1 mass features,\nadding of peak shape metrics of mass features and adding associated ms2 spectra to mass features for\nDDA data to myLCMSobj.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n<li><strong>scan_translator</strong> (str or Path):\nPath to scan translator yaml file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but populates the mass_features attribute of myLCMSobj</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_functions.molecular_formula_search", "modulename": "metaMS.lcms_functions", "qualname": "molecular_formula_search", "kind": "function", "doc": "<p>Perform molecular search on mass features within the LCMS object</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, processes the LCMS object</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow", "modulename": "metaMS.lcms_lipidomics_workflow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters", "kind": "class", "doc": "<p>Parameters for the lipidomics workflow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directory</strong> (str):\nThe directory where the data is stored, all files in the directory will be processed</li>\n<li><strong>output_directory</strong> (str):\nThe directory where the output files will be stored</li>\n<li><strong>corems_toml_path</strong> (str):\nThe path to the corems configuration file</li>\n<li><strong>db_location</strong> (str):\nThe path to the local sqlite database used for searching lipid ms2 spectra</li>\n<li><strong>scan_translator_path</strong> (str):\nThe path to the scan translator file, optional</li>\n<li><strong>cores</strong> (int):\nThe number of cores to use for processing, optional</li>\n</ul>\n"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.__init__", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_paths</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;data/...&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;data/...&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;output&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">corems_toml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">db_location</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scan_translator_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.file_paths", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.file_paths", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;data/...&#x27;, &#x27;data/...&#x27;)"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.output_directory", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.output_directory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;output&#x27;"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.corems_toml_path", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.corems_toml_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.db_location", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.db_location", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.scan_translator_path", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.scan_translator_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "metaMS.lcms_lipidomics_workflow.LipidomicsWorkflowParameters.cores", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "LipidomicsWorkflowParameters.cores", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "metaMS.lcms_lipidomics_workflow.check_lipidomics_workflow_params", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "check_lipidomics_workflow_params", "kind": "function", "doc": "<p>Check that all parameters are valid and exist</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lipid_workflow_params</strong> (LipidomicsWorkflowParameters):\nParameters for the lipidomics workflow</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, raises errors if parameters are not valid or do not exist</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lipid_workflow_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow.export_results", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "export_results", "kind": "function", "doc": "<p>Export results to hdf5 and csv as a lipid report</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n<li><strong>out_path</strong> (str or Path):\nPath to output file</li>\n<li><strong>molecular_metadata</strong> (dict, optional):\nDict with molecular metadata</li>\n<li><strong>final</strong> (bool, optional):\nWhether to export final results</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, exports results to hdf5 and csv as a lipid report</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">molecular_metadata</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">final</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow.run_lipid_sp_ms1", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "run_lipid_sp_ms1", "kind": "function", "doc": "<p>Run signal processing and associated mass feature generation for a lipidomics LCMS file</p>\n\n<p>Run signal processing, get associated ms1, add associated ms2, do ms1 molecular search, \nand export intermediate results from an input LCMS file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_in</strong> (str or Path):\nPath to input file (raw or mzML)</li>\n<li><strong>out_path</strong> (str or Path):\nPath to output file</li>\n<li><strong>params_toml</strong> (str or Path):\nPath to toml file with parameters</li>\n<li><strong>scan_translator</strong> (str or Path):\nPath to scan translator file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_dict</strong> (dict):\nDict with keys \"positive\" and \"negative\" and values of lists of precursor mzs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_in</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">params_toml</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow.prep_metadata", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "prep_metadata", "kind": "function", "doc": "<p>Prepare metadata for ms2 spectral search</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>mz_dicts</strong> (list of dicts):\nList of dicts with keys \"positive\" and \"negative\" and values of lists of precursor mzs</li>\n<li><strong>out_dir</strong> (Path):\nPath to output directory</li>\n<li><strong>db_location</strong> (str):\nPath to lipid database</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>metadata</strong> (dict):\nDict with keys \"mzs\", \"fe\", and \"molecular_metadata\" with values of dicts of precursor mzs (negative and positive), flash entropy search databases (negative and positive), and molecular metadata, respectively</li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Also writes out files for the flash entropy search databases and molecular metadata</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mz_dicts</span>, </span><span class=\"param\"><span class=\"n\">out_dir</span>, </span><span class=\"param\"><span class=\"n\">db_location</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow.process_ms2", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "process_ms2", "kind": "function", "doc": "<p>Process ms2 spectra and perform molecular search</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n<li><strong>metadata</strong> (dict):\nDict with keys \"mzs\", \"fe\", and \"molecular_metadata\" with values of dicts of precursor mzs (negative and positive), flash entropy search databases (negative and positive), and molecular metadata, respectively</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, processes the LCMS object</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">metadata</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow.run_lipid_ms2", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "run_lipid_ms2", "kind": "function", "doc": "<p>Run ms2 spectral search and export final results</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>out_path</strong> (str or Path):\nPath to output file</li>\n<li><strong>metadata</strong> (dict):\nDict with keys \"mzs\", \"fe\", and \"molecular_metadata\" with values of dicts of precursor mzs (negative and positive), flash entropy search databases (negative and positive), and molecular metadata, respectively</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, runs ms2 spectral search and exports final results</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">metadata</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_lipidomics_workflow.run_lcms_lipidomics_workflow", "modulename": "metaMS.lcms_lipidomics_workflow", "qualname": "run_lcms_lipidomics_workflow", "kind": "function", "doc": "<p>Run the lipidomics workflow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lipidomics_workflow_paramaters_file</strong> (str or Path):\nPath to toml file with parameters</li>\n<li><strong>file_paths</strong> (str):\nComma-separated string of file paths</li>\n<li><strong>output_directory</strong> (str):\nPath to output directory</li>\n<li><strong>corems_toml_path</strong> (str):\nPath to corems toml file</li>\n<li><strong>db_location</strong> (str):\nPath to lipid database</li>\n<li><strong>scan_translator_path</strong> (str):\nPath to scan translator file</li>\n<li><strong>cores</strong> (int):\nNumber of cores to use for processing</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, runs the lipidomics workflow</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lipidomics_workflow_paramaters_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_paths</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">corems_toml_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">db_location</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scan_translator_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow", "modulename": "metaMS.lcms_metabolomics_workflow", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters", "kind": "class", "doc": "<p>Parameters for the LC metabolomics workflow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>directory</strong> (str):\nThe directory where the data is stored, all files in the directory will be processed</li>\n<li><strong>output_directory</strong> (str):\nThe directory where the output files will be stored</li>\n<li><strong>corems_toml_path</strong> (str):\nThe path to the corems configuration file</li>\n<li><strong>msp_file_path</strong> (str):\nThe path to the local sqlite database used for searching ms2 spectra</li>\n<li><strong>scan_translator_path</strong> (str):\nThe path to the scan translator file, optional</li>\n<li><strong>cores</strong> (int):\nThe number of cores to use for processing, optional</li>\n</ul>\n"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.__init__", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_paths</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">&#39;data/...&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;data/...&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;output&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">corems_toml_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msp_file_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scan_translator_path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1</span></span>)</span>"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.file_paths", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.file_paths", "kind": "variable", "doc": "<p></p>\n", "annotation": ": tuple", "default_value": "(&#x27;data/...&#x27;, &#x27;data/...&#x27;)"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.output_directory", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.output_directory", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "&#x27;output&#x27;"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.corems_toml_path", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.corems_toml_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.msp_file_path", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.msp_file_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.scan_translator_path", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.scan_translator_path", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str", "default_value": "None"}, {"fullname": "metaMS.lcms_metabolomics_workflow.LCMetabolomicsWorkflowParameters.cores", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "LCMetabolomicsWorkflowParameters.cores", "kind": "variable", "doc": "<p></p>\n", "annotation": ": int", "default_value": "1"}, {"fullname": "metaMS.lcms_metabolomics_workflow.check_lcmetab_workflow_params", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "check_lcmetab_workflow_params", "kind": "function", "doc": "<p>Check that all parameters are valid and exist</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcmetab_workflow_params</strong> (LCMetabolomicsWorkflowParameters):\nParameters for the LC metabolomics workflow</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, raises errors if parameters are not valid or do not exist</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">lcmetab_workflow_params</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.determine_polarity", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "determine_polarity", "kind": "function", "doc": "<p>Determine the polarity of the LCMS file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_path</strong> (str or Path):\nPath to the LCMS file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>polarity</strong> (str):\nPolarity of the LCMS file, either \"positive\" or \"negative\"</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_path</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.export_results", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "export_results", "kind": "function", "doc": "<p>Export results to hdf5 and csv</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n<li><strong>out_path</strong> (str or Path):\nPath to output file</li>\n<li><strong>molecular_metadata</strong> (dict, optional):\nDict with molecular metadata</li>\n<li><strong>final</strong> (bool, optional):\nWhether to export final results</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, exports results to hdf5 and csv</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">out_path</span>, </span><span class=\"param\"><span class=\"n\">molecular_metadata</span>, </span><span class=\"param\"><span class=\"n\">final</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.run_lcmetab_ms1", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "run_lcmetab_ms1", "kind": "function", "doc": "<p>Run signal processing and associated mass feature generation for a metabolomics LCMS file</p>\n\n<p>Run signal processing, get associated ms1, do ms1 molecular search, \nand export intermediate results from an input LCMS file</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>file_in</strong> (str or Path):\nPath to input file (raw or mzML)</li>\n<li><strong>params_toml</strong> (str or Path):\nPath to toml file with parameters</li>\n<li><strong>scan_translator</strong> (str or Path):\nPath to scan translator file</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>mz_dict</strong> (dict):\nDict with keys \"positive\" and \"negative\" and values of lists of precursor mzs</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">file_in</span>, </span><span class=\"param\"><span class=\"n\">params_toml</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.prepare_metadata", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "prepare_metadata", "kind": "function", "doc": "<p>Prepare metadata for ms2 spectral search</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>msp_file_path</strong> (str):\nPath to sqlite database</li>\n<li><strong>generate_lr_metadata</strong> (bool, optional):\nWhether to generate low resolution metadata, default is True</li>\n<li><strong>polarity</strong> (str, optional):\nPolarity to prepare metadata for, can be \"positive\", \"negative\", or None (which will prepare for both polarities)</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, but saves the metadata to a file named \"metadata.pkl\" in the current directory</strong></li>\n</ul>\n\n<h6 id=\"notes\">Notes</h6>\n\n<p>Also writes out files for the flash entropy search databases and molecular metadata</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">msp_file_path</span>, </span><span class=\"param\"><span class=\"n\">generate_lr_metadata</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">polarity</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.process_ms2", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "process_ms2", "kind": "function", "doc": "<p>Process ms2 spectra and perform molecular search</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>myLCMSobj</strong> (corems LCMS object):\nLCMS object to process</li>\n<li><strong>metadata</strong> (dict):\nDict with keys \"mzs\", \"fe\", and \"molecular_metadata\" with values of dicts of precursor mzs (negative and positive), flash entropy search databases (negative and positive), and molecular metadata, respectively</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>molecular_metadata</strong> (dict):\nDict with keys \"positive\" and \"negative\" containing the molecular metadata for each polarity</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">myLCMSobj</span>, </span><span class=\"param\"><span class=\"n\">metadata</span>, </span><span class=\"param\"><span class=\"n\">scan_translator</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.process_complete_workflow", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "process_complete_workflow", "kind": "function", "doc": "<p>Process a single file through the complete workflow</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lcms_metabolomics_workflow.run_lcms_metabolomics_workflow", "modulename": "metaMS.lcms_metabolomics_workflow", "qualname": "run_lcms_metabolomics_workflow", "kind": "function", "doc": "<p>Run the LC metabolomics workflow</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>lcmsmetab_workflow_parameters_file</strong> (str or Path):\nPath to toml file with parameters</li>\n<li><strong>file_paths</strong> (str):\nComma-separated string of file paths</li>\n<li><strong>output_directory</strong> (str):\nPath to output directory</li>\n<li><strong>corems_toml_path</strong> (str):\nPath to corems toml file</li>\n<li><strong>msp_file_path</strong> (str):\nThe path to the local sqlite database used for searching ms2 spectra</li>\n<li><strong>scan_translator_path</strong> (str):\nPath to scan translator file</li>\n<li><strong>cores</strong> (int):\nNumber of cores to use for processing</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong>None, runs the LC metabolomics workflow</strong></li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">lcmsmetab_workflow_parameters_file</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">file_paths</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">output_directory</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">corems_toml_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">msp_file_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">scan_translator_path</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cores</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lipid_metadata_prepper", "modulename": "metaMS.lipid_metadata_prepper", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "metaMS.lipid_metadata_prepper.find_closest", "modulename": "metaMS.lipid_metadata_prepper", "qualname": "find_closest", "kind": "function", "doc": "<p>Find the index of closest value in A to each value in target.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>A</strong> (<code>~numpy.array</code>):\nThe array to search (blueprint). A must be sorted.</li>\n<li><strong>target</strong> (<code>~numpy.array</code>):\nThe array of values to search for. target must be sorted.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~numpy.array</code></strong>: The indices of the closest values in A to each value in target.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">target</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lipid_metadata_prepper.spectrum_to_array", "modulename": "metaMS.lipid_metadata_prepper", "qualname": "spectrum_to_array", "kind": "function", "doc": "<p>Convert MetabRef-formatted spectrum to array.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>spectrum</strong> (str):\nMetabRef spectrum, i.e. list of (m/z,abundance) pairs.</li>\n<li><strong>normalize</strong> (bool):\nNormalize the spectrum by its magnitude.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~numpy.array</code></strong>: Array of shape (N, 2), with m/z in the first column and abundance in\nthe second.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">spectrum</span>, </span><span class=\"param\"><span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "metaMS.lipid_metadata_prepper.get_lipid_library", "modulename": "metaMS.lipid_metadata_prepper", "qualname": "get_lipid_library", "kind": "function", "doc": "<p>Get lipid library from database.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>db_location</strong> (str):\nPath to the database.</li>\n<li><strong>mz_list</strong> (<code>~numpy.array</code>):\nArray of observed m/z values.</li>\n<li><strong>polarity</strong> (str):\nPolarity of the MS2 spectra.</li>\n<li><strong>mz_tol_ppm</strong> (float):\nm/z tolerance in ppm for matching ms1 precursor m/z to observed m/z.</li>\n<li><strong>format</strong> (str, optional):\nFormat of the library to return. Options are 'flashentropy' (default) or 'metabref'.</li>\n<li><strong>normalize</strong> (bool, optional):\nNormalize each spectrum by its magnitude. By default, True.</li>\n<li><strong>fe_kwargs</strong> (dict, optional):\nKeyword arguments for instantiation of FlashEntropy search and building index for FlashEntropy search;\nany keys not recognized will be ignored. By default, all parameters set to defaults.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<ul>\n<li><strong><code>~ms_entropy.FlashEntropySearch</code></strong>: MS2 library as FlashEntropy search instance.</li>\n<li><strong><code>~dataclasses.dataclass</code></strong>: Lipid metadata as LipidMetadata dataclass.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">db_location</span>,</span><span class=\"param\">\t<span class=\"n\">mz_list</span>,</span><span class=\"param\">\t<span class=\"n\">polarity</span>,</span><span class=\"param\">\t<span class=\"n\">mz_tol_ppm</span>,</span><span class=\"param\">\t<span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s1\">&#39;flashentropy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fe_kwargs</span><span class=\"o\">=</span><span class=\"p\">{}</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();